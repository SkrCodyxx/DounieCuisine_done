#!/bin/bash
# SCRIPT DE D√âPLOIEMENT KUBERNETES - DOUNIE CUISINE
# D√©ploiement complet sur cluster Kubernetes

set -e

echo "üöÄ D√âMARRAGE D√âPLOIEMENT DOUNIE CUISINE SUR KUBERNETES"

# Variables
NAMESPACE="dounie-cuisine"
APP_NAME="dounie-cuisine"

# Fonction de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# V√©rification kubectl
if ! command -v kubectl &> /dev/null; then
    log "‚ùå kubectl n'est pas install√©"
    exit 1
fi

# 1. Cr√©ation du namespace
log "Cr√©ation du namespace..."
kubectl apply -f namespace.yaml

# 2. Configuration secrets et configmaps
log "Application des configurations..."
kubectl apply -f secret.yaml -n $NAMESPACE
kubectl apply -f configmap.yaml -n $NAMESPACE

# 3. D√©ploiement du stockage persistant
log "Configuration du stockage..."
kubectl apply -f storage.yaml -n $NAMESPACE

# 4. D√©ploiement PostgreSQL
log "D√©ploiement de la base de donn√©es..."
kubectl apply -f postgres-deployment.yaml -n $NAMESPACE

# Attente que PostgreSQL soit pr√™t
log "Attente du d√©marrage de PostgreSQL..."
kubectl wait --for=condition=ready pod -l app=postgres -n $NAMESPACE --timeout=300s

# 5. D√©ploiement de l'application
log "D√©ploiement de l'application..."
kubectl apply -f app-deployment.yaml -n $NAMESPACE

# Attente que l'application soit pr√™te
log "Attente du d√©marrage de l'application..."
kubectl wait --for=condition=ready pod -l app=$APP_NAME -n $NAMESPACE --timeout=300s

# 6. D√©ploiement Nginx (reverse proxy)
log "D√©ploiement du reverse proxy..."
kubectl apply -f nginx-deployment.yaml -n $NAMESPACE

# Attente que Nginx soit pr√™t
log "Attente du d√©marrage de Nginx..."
kubectl wait --for=condition=ready pod -l app=nginx -n $NAMESPACE --timeout=300s

# 7. V√©rification du d√©ploiement
log "V√©rification du d√©ploiement..."

# Status des pods
kubectl get pods -n $NAMESPACE

# Status des services
kubectl get services -n $NAMESPACE

# Test de sant√© de l'API
CLUSTER_IP=$(kubectl get service ${APP_NAME}-service -n $NAMESPACE -o jsonpath='{.spec.clusterIP}')
if kubectl run --rm -i --tty test-pod --image=curlimages/curl --restart=Never -n $NAMESPACE -- curl -f http://$CLUSTER_IP:8001/api/health; then
    log "‚úÖ Test de sant√© API r√©ussi"
else
    log "‚ö†Ô∏è Test de sant√© API √©chou√© - v√©rifiez les logs"
fi

# 8. Informations d'acc√®s
log "üéâ D√âPLOIEMENT KUBERNETES TERMIN√â!"

echo ""
echo "=== INFORMATIONS D'ACC√àS ==="
echo "Namespace: $NAMESPACE"
echo "Pods:"
kubectl get pods -n $NAMESPACE

echo ""
echo "Services:"
kubectl get services -n $NAMESPACE

echo ""
echo "=== COMMANDES UTILES ==="
echo "Voir les pods: kubectl get pods -n $NAMESPACE"
echo "Logs backend: kubectl logs -f deployment/$APP_NAME -n $NAMESPACE"
echo "Logs nginx: kubectl logs -f deployment/nginx -n $NAMESPACE"
echo "Shell dans pod: kubectl exec -it deployment/$APP_NAME -n $NAMESPACE -- /bin/bash"
echo "Port forward: kubectl port-forward service/nginx-service 8080:80 -n $NAMESPACE"
echo "================================="